import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import sqlite3
import sys
import os
from PIL import Image, ImageTk
from datetime import datetime
import webbrowser
import random

class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Jyldam jauap")
        self.root.geometry("1000x600")

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –∫—Ä–∞—Å–Ω—ã–π –∏ —á–µ—Ä–Ω—ã–π —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
        self.primary_color = "#B71C1C"  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        self.secondary_color = "#212121"  # –ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
        self.accent_color = "#F44336"  # –ë–æ–ª–µ–µ —è—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤
        self.bg_color = "#F5F5F5"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        self.text_color = "#FFFFFF"  # –ë–µ–ª—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        self.card_bg = "#FFFFFF"  # –ë–µ–ª—ã–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫

        self.root.configure(bg=self.bg_color)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏)
        try:
            self.root.iconbitmap("images/icon.ico")
        except:
            pass

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header()
        self.create_sidebar()
        self.create_main_content()

    def create_header(self):
        header = tk.Frame(self.root, bg=self.primary_color, height=80)
        header.pack(side="top", fill="x")
        header.pack_propagate(False)

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –∏–∫–æ–Ω–∫—É
        try:
            logo_img = Image.open("images/logo.png")
            logo_img = logo_img.resize((50, 50), Image.LANCZOS)
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(header, image=logo_photo, bg=self.primary_color)
            logo_label.image = logo_photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logo_label.pack(side="left", padx=10, pady=10)
        except:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–∫–æ–Ω–∫—É
            logo_label = tk.Label(header, text="JJ", font=("Helvetica", 18, "bold"), 
                                 fg=self.primary_color, bg="white", width=3, height=1)
            logo_label.pack(side="left", padx=10, pady=10)

        title = tk.Label(header, text="JYLDAM JAUAP", font=("Helvetica", 24, "bold"), fg=self.text_color, bg=self.primary_color)
        title.pack(side="left", padx=5, pady=20)

        subtitle = tk.Label(header, text="–ü—Ä–∞–≤–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞", font=("Helvetica", 12), fg=self.text_color, bg=self.primary_color)
        subtitle.pack(side="left", padx=10, pady=20)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime("%d.%m.%Y")
        date_label = tk.Label(header, text=current_date, font=("Helvetica", 12), 
                             fg=self.text_color, bg=self.primary_color)
        date_label.pack(side="right", padx=20, pady=20)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤ - –ù–û–í–´–ô –ö–û–î
        lang_frame = tk.Frame(header, bg=self.primary_color)
        lang_frame.pack(side="right", padx=5, pady=20)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
        lang_button_style = {
            "font": ("Helvetica", 10, "bold"),
            "width": 2,
            "bd": 1,
            "relief": "solid",
            "cursor": "hand2"
        }
        
        # –ö–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
        kz_btn = tk.Button(lang_frame, text="KZ", bg="white", fg=self.primary_color, 
                          command=self.switch_to_kazakh, **lang_button_style)
        kz_btn.pack(side="left", padx=2)
        
        ru_btn = tk.Button(lang_frame, text="RU", bg=self.accent_color, fg="white", 
                          command=self.switch_to_russian, **lang_button_style)
        ru_btn.pack(side="left", padx=2)
        
        en_btn = tk.Button(lang_frame, text="EN", bg="white", fg=self.primary_color, 
                          command=self.switch_to_english, **lang_button_style)
        en_btn.pack(side="left", padx=2)

        profile_icon = tk.Label(header, text="AJ", font=("Helvetica", 16, "bold"), 
                               fg=self.primary_color, bg="white", width=3, height=2, 
                               relief="solid", cursor="hand2")
        profile_icon.pack(side="right", padx=10, pady=10)
        profile_icon.bind("<Button-1>", lambda e: self.open_profile())
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ - –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ
    def switch_to_kazakh(self):
        messagebox.showinfo("–¢—ñ–ª –∞—É—ã—Å—Ç—ã—Ä—É", "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –∞—É—ã—Å—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã ”ô–∑—ñ—Ä–≥–µ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å.")
    
    def switch_to_russian(self):
        messagebox.showinfo("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞", "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    def switch_to_english(self):
        messagebox.showinfo("Language Switch", "English language switch feature is not available yet.")

    def create_sidebar(self):
        sidebar = tk.Frame(self.root, bg=self.secondary_color, width=250)
        sidebar.pack(side="left", fill="y")
        sidebar.pack_propagate(False)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        gradient_frame = tk.Frame(sidebar, bg=self.accent_color, height=3)
        gradient_frame.pack(fill="x", pady=5)

        button_style = {
            "font": ("Helvetica", 12),
            "bg": self.secondary_color,
            "fg": self.text_color,
            "bd": 0,
            "width": 25,
            "height": 2,
            "anchor": "w",
            "padx": 20,
            "activebackground": self.accent_color,
            "activeforeground": self.text_color,
            "cursor": "hand2"  # –ö—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ —Ä—É–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        }

        sections = [
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.show_main_menu),
            ("ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", self.open_ai_assistant),
            ("üí∞ –®—Ç—Ä–∞—Ñ—ã –∏ –Ω–∞–ª–æ–≥–∏", self.open_fines),
            ("üë• –ë–∞–∑–∞ —é—Ä–∏—Å—Ç–æ–≤", self.open_lawyers),
            ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", self.open_news),
            ("‚ùì –°–ø—Ä–∞–≤–∫–∞", self.open_help)
        ]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        for text, command in sections:
            btn = tk.Button(sidebar, text=text, command=command, **button_style)
            btn.pack(fill="x", pady=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            btn.bind("<Enter>", lambda e, b=btn: self.on_hover(b))
            btn.bind("<Leave>", lambda e, b=btn: self.on_leave(b))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –≤–Ω–∏–∑—É —Å–∞–π–¥–±–∞—Ä–∞
        version_frame = tk.Frame(sidebar, bg=self.secondary_color)
        version_frame.pack(side="bottom", fill="x", pady=10)
        
        version_label = tk.Label(version_frame, text="–í–µ—Ä—Å–∏—è 1.2.0", 
                                font=("Helvetica", 8), fg="#888888", bg=self.secondary_color)
        version_label.pack(pady=5)

    def on_hover(self, button):
        button.config(bg=self.accent_color)

    def on_leave(self, button):
        button.config(bg=self.secondary_color)

    def create_main_content(self):
        self.main_content = tk.Frame(self.root, bg=self.bg_color)
        self.main_content.pack(side="right", fill="both", expand=True)
        self.show_main_menu()

    def show_main_menu(self):
        for widget in self.main_content.winfo_children():
            widget.destroy()

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = tk.Frame(self.main_content, bg=self.bg_color)
        main_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–≤—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas = tk.Canvas(main_frame, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        content_frame = tk.Frame(canvas, bg=self.bg_color)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas_window = canvas.create_window((0, 0), window=content_frame, anchor="nw")
        
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        content_frame.bind("<Configure>", configure_scroll_region)
        
        def on_canvas_configure(event):
            canvas.itemconfig(canvas_window, width=event.width)
        
        canvas.bind("<Configure>", on_canvas_configure)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        welcome_frame = tk.Frame(content_frame, bg=self.bg_color)
        welcome_frame.pack(fill="x", pady=10)
        
        welcome_label = tk.Label(welcome_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jyldam jauap!", 
                               font=("Helvetica", 24, "bold"), fg=self.primary_color, bg=self.bg_color)
        welcome_label.pack(pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        slogan_label = tk.Label(welcome_frame, 
                              text="–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", 
                              font=("Helvetica", 14), fg=self.secondary_color, bg=self.bg_color)
        slogan_label.pack(pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        quick_access_frame = tk.Frame(content_frame, bg=self.bg_color)
        quick_access_frame.pack(fill="x", pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        tk.Label(quick_access_frame, text="–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:", 
                font=("Helvetica", 16, "bold"), fg=self.primary_color, bg=self.bg_color).pack(anchor="w")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cards_frame = tk.Frame(quick_access_frame, bg=self.bg_color)
        cards_frame.pack(fill="x", pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫
        for i in range(3):
            cards_frame.columnconfigure(i, weight=1)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
        ai_card = tk.Frame(cards_frame, bg=self.card_bg, relief="raised", bd=1)
        ai_card.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        tk.Label(ai_card, text="ü§ñ", font=("Helvetica", 24), bg=self.card_bg).pack(pady=5)
        tk.Label(ai_card, text="–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
                font=("Helvetica", 14, "bold"), bg=self.card_bg, fg=self.primary_color).pack()
        tk.Label(ai_card, text="–ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç", 
                font=("Helvetica", 10), bg=self.card_bg, wraplength=150).pack(pady=5)
        
        ai_button = tk.Button(ai_card, text="–°–ø—Ä–æ—Å–∏—Ç—å", bg=self.primary_color, fg=self.text_color,
                            command=self.open_ai_assistant, cursor="hand2")
        ai_button.pack(pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Æ—Ä–∏—Å—Ç—ã
        lawyers_card = tk.Frame(cards_frame, bg=self.card_bg, relief="raised", bd=1)
        lawyers_card.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        
        tk.Label(lawyers_card, text="üë•", font=("Helvetica", 24), bg=self.card_bg).pack(pady=5)
        tk.Label(lawyers_card, text="–Æ—Ä–∏—Å—Ç—ã", 
                font=("Helvetica", 14, "bold"), bg=self.card_bg, fg=self.primary_color).pack()
        tk.Label(lawyers_card, text="–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏—Å—Ç–∞", 
                font=("Helvetica", 10), bg=self.card_bg, wraplength=150).pack(pady=5)
        
        lawyers_button = tk.Button(lawyers_card, text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", bg=self.primary_color, 
                                 fg=self.text_color, command=self.open_lawyers, cursor="hand2")
        lawyers_button.pack(pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –®—Ç—Ä–∞—Ñ—ã
        fines_card = tk.Frame(cards_frame, bg=self.card_bg, relief="raised", bd=1)
        fines_card.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")
        
        tk.Label(fines_card, text="üí∞", font=("Helvetica", 24), bg=self.card_bg).pack(pady=5)
        tk.Label(fines_card, text="–®—Ç—Ä–∞—Ñ—ã –∏ –Ω–∞–ª–æ–≥–∏", 
                font=("Helvetica", 14, "bold"), bg=self.card_bg, fg=self.primary_color).pack()
        tk.Label(fines_card, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö –∏ –Ω–∞–ª–æ–≥–∞—Ö", 
                font=("Helvetica", 10), bg=self.card_bg, wraplength=150).pack(pady=5)
        
        fines_button = tk.Button(fines_card, text="–£–∑–Ω–∞—Ç—å", bg=self.primary_color, 
                               fg=self.text_color, command=self.open_fines, cursor="hand2")
        fines_button.pack(pady=10)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞—Ä—Ç–æ—á–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏)
        stats_frame = tk.Frame(content_frame, bg=self.card_bg, relief="solid", bd=1)
        stats_frame.pack(fill="x", pady=15, padx=5)
        
        tk.Label(stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                font=("Helvetica", 16, "bold"), fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=15, pady=10)
        
        stats_data_frame = tk.Frame(stats_frame, bg=self.card_bg)
        stats_data_frame.pack(fill="x", pady=5, padx=15)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            conn = sqlite3.connect("db/users.db")
            cursor = conn.cursor()
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é—Ä–∏—Å—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM lawyers")
            lawyers_count = cursor.fetchone()[0]
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            cursor.execute("SELECT COUNT(*) FROM news")
            news_count = cursor.fetchone()[0]
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–æ–≤
            cursor.execute("SELECT COUNT(*) FROM fines")
            fines_count = cursor.fetchone()[0]
            
            conn.close()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
            stats_labels = [
                f"üßë‚Äç‚öñÔ∏è –Æ—Ä–∏—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {lawyers_count}",
                f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {news_count}",
                f"üí∞ –¢–∏–ø–æ–≤ —à—Ç—Ä–∞—Ñ–æ–≤: {fines_count}"
            ]
            
            for i, text in enumerate(stats_labels):
                tk.Label(stats_data_frame, text=text, font=("Helvetica", 12), 
                        fg=self.secondary_color, bg=self.card_bg).pack(side="left", padx=20, pady=5)
                
        except Exception as e:
            tk.Label(stats_data_frame, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", 
                    font=("Helvetica", 12), fg="red", bg=self.card_bg).pack(pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_header = tk.Frame(content_frame, bg=self.bg_color)
        news_header.pack(fill="x", pady=10)
        
        tk.Label(news_header, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:", 
                font=("Helvetica", 18, "bold"), fg=self.primary_color, bg=self.bg_color).pack(side="left")
        
        view_all_btn = tk.Button(news_header, text="–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", bg=self.secondary_color, 
                               fg=self.text_color, command=self.open_news, cursor="hand2")
        view_all_btn.pack(side="right", padx=10)

        # –ù–æ–≤–æ—Å—Ç–∏
        news_frame = tk.Frame(content_frame, bg=self.bg_color)
        news_frame.pack(fill="x", pady=5)

        try:
            conn = sqlite3.connect("db/users.db")
            cursor = conn.cursor()
            cursor.execute("SELECT title, description FROM news ORDER BY id DESC LIMIT 3")
            news_data = cursor.fetchall()
            conn.close()

            if not news_data:
                tk.Label(news_frame, text="–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", 
                        font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color).pack(anchor="w", pady=10)
            else:
                for title, desc in news_data:
                    news_card = tk.Frame(news_frame, bg=self.card_bg, relief="solid", borderwidth=1)
                    news_card.pack(fill="x", pady=5)
                    news_card.bind("<Button-1>", lambda e: self.open_news())
                    news_card.bind("<Enter>", lambda e, c=news_card: c.config(relief="raised"))
                    news_card.bind("<Leave>", lambda e, c=news_card: c.config(relief="solid"))

                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
                    tk.Label(news_card, text=title, font=("Helvetica", 14, "bold"), 
                            fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=5)
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
                    short_desc = desc[:150] + "..." if len(desc) > 150 else desc
                    desc_label = tk.Label(news_card, text=short_desc, font=("Helvetica", 12), 
                                        fg=self.secondary_color, bg=self.card_bg, 
                                        wraplength=700, justify="left")
                    desc_label.pack(anchor="w", padx=10, pady=5)
                    
                    # –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ"
                    read_more = tk.Button(news_card, text="–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ", 
                                        bg=self.bg_color, fg=self.secondary_color,
                                        command=self.open_news, cursor="hand2")
                    read_more.pack(anchor="e", padx=10, pady=5)
        except Exception as e:
            tk.Label(news_frame, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}", 
                    font=("Helvetica", 12), fg="red", bg=self.bg_color).pack(anchor="w", pady=10)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª
        footer_frame = tk.Frame(content_frame, bg="#E0E0E0", height=40)
        footer_frame.pack(fill="x", pady=20, side="bottom")
        
        copyright_label = tk.Label(footer_frame, text="¬© 2025 Jyldam jauap. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", 
                                 font=("Helvetica", 10), fg=self.secondary_color, bg="#E0E0E0")
        copyright_label.pack(side="left", padx=20, pady=10)
        
        privacy_label = tk.Label(footer_frame, text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", 
                               font=("Helvetica", 10), fg=self.primary_color, bg="#E0E0E0", cursor="hand2")
        privacy_label.pack(side="right", padx=20, pady=10)
        privacy_label.bind("<Button-1>", lambda e: self.show_privacy_policy())

    def open_news(self):
        for widget in self.main_content.winfo_children():
            widget.destroy()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(self.main_content, text="–ù–æ–≤–æ—Å—Ç–∏", 
                font=("Helvetica", 24, "bold"), fg=self.primary_color, bg=self.bg_color).pack(pady=20)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        news_container = tk.Frame(self.main_content, bg=self.bg_color)
        news_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–≤—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas = tk.Canvas(news_container, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(news_container, orient="vertical", command=canvas.yview)
        news_frame = tk.Frame(canvas, bg=self.bg_color)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas_window = canvas.create_window((0, 0), window=news_frame, anchor="nw")
        
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        news_frame.bind("<Configure>", configure_scroll_region)
        
        def on_canvas_configure(event):
            canvas.itemconfig(canvas_window, width=event.width)
        
        canvas.bind("<Configure>", on_canvas_configure)

        try:
            conn = sqlite3.connect("db/users.db")
            cursor = conn.cursor()
            cursor.execute("SELECT title, description FROM news ORDER BY id DESC")
            news_data = cursor.fetchall()
            conn.close()

            if not news_data:
                tk.Label(news_frame, text="–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", 
                        font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color).pack(anchor="w", pady=10)
            else:
                for title, desc in news_data:
                    news_card = tk.Frame(news_frame, bg=self.card_bg, relief="solid", borderwidth=1)
                    news_card.pack(fill="x", pady=5)

                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
                    tk.Label(news_card, text=title, 
                            font=("Helvetica", 14, "bold"), fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=5)
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
                    desc_label = tk.Label(news_card, text=desc, 
                                        font=("Helvetica", 12), fg=self.secondary_color, 
                                        bg=self.card_bg, wraplength=700, justify="left")
                    desc_label.pack(anchor="w", padx=10, pady=5)
                    
                    # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–ª—É—á–∞–π–Ω–∞—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
                    date = f"{random.randint(1, 28)}.{random.randint(1, 12)}.2025"
                    date_label = tk.Label(news_card, text=f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {date}", 
                                        font=("Helvetica", 10), fg="#888888", bg=self.card_bg)
                    date_label.pack(anchor="e", padx=10, pady=5)
        except Exception as e:
            tk.Label(news_frame, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}", 
                    font=("Helvetica", 12), fg="red", bg=self.bg_color).pack(anchor="w", pady=10)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_btn = tk.Button(news_frame, text="‚Üê –ù–∞–∑–∞–¥", 
                            command=self.show_main_menu, bg=self.secondary_color, fg=self.text_color)
        back_btn.pack(pady=20)

    def open_fines(self):
        for widget in self.main_content.winfo_children():
            widget.destroy()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self.main_content, bg=self.bg_color)
        header_frame.pack(fill="x", pady=10)
        
        tk.Label(header_frame, text="–®—Ç—Ä–∞—Ñ—ã –∏ –Ω–∞–ª–æ–≥–∏", 
                font=("Helvetica", 24, "bold"), fg=self.primary_color, bg=self.bg_color).pack(side="left", padx=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(header_frame, bg=self.bg_color)
        search_frame.pack(side="right", padx=20)
        
        search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=search_var, width=30)
        search_entry.pack(side="left", padx=5)
        
        search_btn = tk.Button(search_frame, text="–ü–æ–∏—Å–∫", 
                              bg=self.secondary_color, fg=self.text_color, 
                              command=lambda: self.search_fines(search_var.get()))
        search_btn.pack(side="left")

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
        fines_container = tk.Frame(self.main_content, bg=self.bg_color)
        fines_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–≤—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas = tk.Canvas(fines_container, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(fines_container, orient="vertical", command=canvas.yview)
        self.fines_frame = tk.Frame(canvas, bg=self.bg_color)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas_window = canvas.create_window((0, 0), window=self.fines_frame, anchor="nw")
        
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        self.fines_frame.bind("<Configure>", configure_scroll_region)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ç—Ä–∞—Ñ—ã
        self.load_fines()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_btn = tk.Button(self.main_content, text="‚Üê –ù–∞–∑–∞–¥", 
                            command=self.show_main_menu, bg=self.secondary_color, fg=self.text_color)
        back_btn.pack(pady=10)

    def load_fines(self, search_term=None):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        for widget in self.fines_frame.winfo_children():
            widget.destroy()

        try:
            conn = sqlite3.connect("db/users.db")
            cursor = conn.cursor()
            
            if search_term:
                cursor.execute("SELECT description, amount FROM fines WHERE description LIKE ?", 
                             (f"%{search_term}%",))
            else:
                cursor.execute("SELECT description, amount FROM fines")
                
            fines = cursor.fetchall()
            conn.close()

            if not fines:
                tk.Label(self.fines_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö –∏ –Ω–∞–ª–æ–≥–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
                        font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color).pack(anchor="w", pady=10)
            else:
                for i, (desc, amount) in enumerate(fines):
                    fine_card = tk.Frame(self.fines_frame, bg=self.card_bg, relief="solid", borderwidth=1)
                    fine_card.pack(fill="x", pady=5)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —á–µ—Ç–Ω—ã—Ö –∏ –Ω–µ—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                    bg_color = "#F9F9F9" if i % 2 == 0 else self.card_bg
                    fine_card.configure(bg=bg_color)
                    
                    desc_label = tk.Label(fine_card, text=desc, font=("Helvetica", 12, "bold"), 
                                        fg=self.secondary_color, bg=bg_color, wraplength=700, justify="left")
                    desc_label.pack(anchor="w", padx=10, pady=5)
                    
                    amount_label = tk.Label(fine_card, text=f"–°—É–º–º–∞: {amount} KZT", 
                                          font=("Helvetica", 12), fg=self.primary_color, bg=bg_color)
                    amount_label.pack(anchor="w", padx=10, pady=5)
        except Exception as e:
            tk.Label(self.fines_frame, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", 
                    font=("Helvetica", 12), fg="red", bg=self.bg_color).pack(anchor="w", pady=10)

    def search_fines(self, search_term):
        self.load_fines(search_term)

    def open_lawyers(self):
        for widget in self.main_content.winfo_children():
            widget.destroy()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self.main_content, bg=self.bg_color)
        header_frame.pack(fill="x", pady=10)
        
        tk.Label(header_frame, text="–ë–∞–∑–∞ —é—Ä–∏—Å—Ç–æ–≤", 
                font=("Helvetica", 24, "bold"), fg=self.primary_color, bg=self.bg_color).pack(side="left", padx=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(header_frame, bg=self.bg_color)
        search_frame.pack(side="right", padx=20)
        
        search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=search_var, width=30)
        search_entry.pack(side="left", padx=5)
        
        search_btn = tk.Button(search_frame, text="–ü–æ–∏—Å–∫", 
                              bg=self.secondary_color, fg=self.text_color, 
                              command=lambda: self.search_lawyers(search_var.get()))
        search_btn.pack(side="left")

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —é—Ä–∏—Å—Ç–æ–≤
        lawyers_container = tk.Frame(self.main_content, bg=self.bg_color)
        lawyers_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–≤—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas = tk.Canvas(lawyers_container, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(lawyers_container, orient="vertical", command=canvas.yview)
        self.lawyers_frame = tk.Frame(canvas, bg=self.bg_color)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas_window = canvas.create_window((0, 0), window=self.lawyers_frame, anchor="nw")
        
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        self.lawyers_frame.bind("<Configure>", configure_scroll_region)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —é—Ä–∏—Å—Ç–æ–≤
        self.load_lawyers()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_btn = tk.Button(self.main_content, text="‚Üê –ù–∞–∑–∞–¥", 
                            command=self.show_main_menu, bg=self.secondary_color, fg=self.text_color)
        back_btn.pack(pady=10)

    def load_lawyers(self, search_term=None):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        for widget in self.lawyers_frame.winfo_children():
            widget.destroy()

        try:
            conn = sqlite3.connect("db/users.db")
            cursor = conn.cursor()
            
            if search_term:
                cursor.execute("""
                    SELECT name, phone, specialization, experience, rating FROM lawyers
                    WHERE name LIKE ? OR specialization LIKE ?
                    ORDER BY rating DESC
                """, (f"%{search_term}%", f"%{search_term}%"))
            else:
                cursor.execute("""
                    SELECT name, phone, specialization, experience, rating FROM lawyers
                    ORDER BY rating DESC
                """)
                
            lawyers = cursor.fetchall()
            conn.close()

            if not lawyers:
                tk.Label(self.lawyers_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
                        font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color).pack(anchor="w", pady=10)
            else:
                for row in lawyers:
                    lawyer_card = tk.Frame(self.lawyers_frame, bg=self.card_bg, relief="solid", borderwidth=1)
                    lawyer_card.pack(fill="x", pady=10)
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if len(row) >= 4:
                        name, phone, specialization, experience = row[:4]
                        rating = row[4] if len(row) > 4 else 0  # –†–µ–π—Ç–∏–Ω–≥
                        
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–µ
                        info_frame = tk.Frame(lawyer_card, bg=self.card_bg)
                        info_frame.pack(fill="x", padx=10, pady=5)
                        
                        # –§–æ—Ç–æ/–∏–∫–æ–Ω–∫–∞ —é—Ä–∏—Å—Ç–∞
                        try:
                            img = Image.open(f"images/lawyers/{name.split()[0]}.jpg")
                            img = img.resize((80, 80), Image.LANCZOS)
                            photo = ImageTk.PhotoImage(img)
                            img_label = tk.Label(info_frame, image=photo, bg=self.card_bg)
                            img_label.image = photo
                            img_label.pack(side="left", padx=10)
                        except:
                            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–∫–æ–Ω–∫—É
                            img_label = tk.Label(info_frame, text=name[0], font=("Helvetica", 24, "bold"), 
                                               fg=self.text_color, bg=self.primary_color, width=3, height=2)
                            img_label.pack(side="left", padx=10)
                        
                        # –î–µ—Ç–∞–ª–∏ —é—Ä–∏—Å—Ç–∞
                        details_frame = tk.Frame(info_frame, bg=self.card_bg)
                        details_frame.pack(side="left", fill="both", expand=True, padx=10)
                        
                        name_frame = tk.Frame(details_frame, bg=self.card_bg)
                        name_frame.pack(anchor="w", fill="x")
                        
                        tk.Label(name_frame, text=name, font=("Helvetica", 14, "bold"), 
                                fg=self.primary_color, bg=self.card_bg).pack(side="left")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–∞–º–∏
                        rating_frame = tk.Frame(name_frame, bg=self.card_bg)
                        rating_frame.pack(side="left", padx=15)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–∞–º–∏
                        for i in range(5):
                            if i < int(rating):
                                star = "‚òÖ"  # –ü–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞
                                color = "#FFD700"  # –ó–æ–ª–æ—Ç–æ–π
                            elif i < rating:
                                star = "‚òÖ"  # –ü–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞ –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
                                color = "#FFD700"  # –ó–æ–ª–æ—Ç–æ–π
                            else:
                                star = "‚òÜ"  # –ü—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
                                color = "#888888"  # –°–µ—Ä—ã–π
                                
                            tk.Label(rating_frame, text=star, font=("Helvetica", 12), 
                                   fg=color, bg=self.card_bg).pack(side="left")
                            
                        # –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
                        tk.Label(rating_frame, text=f"({rating})", font=("Helvetica", 10), 
                               fg="#888888", bg=self.card_bg).pack(side="left", padx=5)
                        
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        tk.Label(details_frame, text=f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", font=("Helvetica", 12), 
                               fg=self.secondary_color, bg=self.card_bg).pack(anchor="w")
                        tk.Label(details_frame, text=f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}", 
                               font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg).pack(anchor="w")
                        tk.Label(details_frame, text=f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {experience} –ª–µ—Ç", 
                               font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg).pack(anchor="w")
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        button_frame = tk.Frame(lawyer_card, bg=self.card_bg)
                        button_frame.pack(fill="x", padx=10, pady=10)
                        
                        contact_btn = tk.Button(button_frame, text="–°–≤—è–∑–∞—Ç—å—Å—è", 
                                              bg=self.primary_color, fg=self.text_color,
                                              command=lambda p=phone: self.contact_lawyer(p))
                        contact_btn.pack(side="right", padx=5)
                        
                        info_btn = tk.Button(button_frame, text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", 
                                           bg=self.secondary_color, fg=self.text_color,
                                           command=lambda n=name: self.show_lawyer_info(n))
                        info_btn.pack(side="right", padx=5)
                    elif len(row) == 2:
                        name, phone = row
                        tk.Label(lawyer_card, text=name, font=("Helvetica", 14, "bold"), 
                               fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=2)
                        tk.Label(lawyer_card, text=f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", font=("Helvetica", 12), 
                               fg=self.secondary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=1)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∞—Ç—å—Å—è
                        contact_btn = tk.Button(lawyer_card, text="–°–≤—è–∑–∞—Ç—å—Å—è", 
                                              bg=self.primary_color, fg=self.text_color,
                                              command=lambda p=phone: self.contact_lawyer(p))
                        contact_btn.pack(anchor="e", padx=10, pady=5)
        except Exception as e:
            tk.Label(self.lawyers_frame, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", 
                    font=("Helvetica", 12), fg="red", bg=self.bg_color).pack(anchor="w", pady=10)

    def search_lawyers(self, search_term):
        self.load_lawyers(search_term)

    def contact_lawyer(self, phone):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        messagebox.showinfo("–°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º", 
                          f"–°–≤—è–∑—ã–≤–∞–µ–º—Å—è —Å —é—Ä–∏—Å—Ç–æ–º –ø–æ –Ω–æ–º–µ—Ä—É {phone}\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. " + 
                          "–Æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    def show_lawyer_info(self, name):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é—Ä–∏—Å—Ç–µ
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–µ", 
                          f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–µ {name}\n\n" + 
                          "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é—Ä–∏—Å—Ç–µ, " + 
                          "–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ç.–¥.")

    def open_ai_assistant(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º chat.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–º–µ—Å—Ç–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —á–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        try:
            subprocess.Popen(["python", "chat.py"])
        except Exception as e:
            # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            for widget in self.main_content.winfo_children():
                widget.destroy()
                
            error_frame = tk.Frame(self.main_content, bg=self.bg_color)
            error_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            tk.Label(error_frame, text="–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", 
                   font=("Helvetica", 24, "bold"), fg="red", bg=self.bg_color).pack(pady=20)
            
            tk.Label(error_frame, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}", 
                   font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color, 
                   wraplength=700, justify="left").pack(pady=10)
            
            tk.Label(error_frame, text="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª chat.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.", 
                   font=("Helvetica", 12), fg=self.secondary_color, bg=self.bg_color).pack(pady=5)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            back_btn = tk.Button(error_frame, text="‚Üê –ù–∞–∑–∞–¥", 
                               command=self.show_main_menu, bg=self.secondary_color, fg=self.text_color)
            back_btn.pack(pady=20)

    def open_help(self):
        for widget in self.main_content.winfo_children():
            widget.destroy()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(self.main_content, text="–°–ø—Ä–∞–≤–∫–∞", 
                font=("Helvetica", 24, "bold"), fg=self.primary_color, bg=self.bg_color).pack(pady=20)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        help_container = tk.Frame(self.main_content, bg=self.bg_color)
        help_container.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–≤—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas = tk.Canvas(help_container, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(help_container, orient="vertical", command=canvas.yview)
        help_frame = tk.Frame(canvas, bg=self.bg_color)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        canvas.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas_window = canvas.create_window((0, 0), window=help_frame, anchor="nw")
        
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        help_frame.bind("<Configure>", configure_scroll_region)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å–ø—Ä–∞–≤–∫–∏
        help_sections = [
            ("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "Jyldam jauap - —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞."),
            ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á–µ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."),
            ("–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."),
            ("–®—Ç—Ä–∞—Ñ—ã –∏ –Ω–∞–ª–æ–≥–∏", "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö –∏ –Ω–∞–ª–æ–≥–∞—Ö, –∏—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."),
            ("–ë–∞–∑–∞ —é—Ä–∏—Å—Ç–æ–≤", "–ë–∞–∑–∞ —é—Ä–∏—Å—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é—Ä–∏—Å—Ç–∞—Ö, –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."),
            ("–ù–æ–≤–æ—Å—Ç–∏", "–í —Ä–∞–∑–¥–µ–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –¥—Ä—É–≥–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.")
        ]
        
        for title, desc in help_sections:
            section_frame = tk.Frame(help_frame, bg=self.card_bg, relief="solid", borderwidth=1)
            section_frame.pack(fill="x", pady=5)
            
            tk.Label(section_frame, text=title, 
                   font=("Helvetica", 14, "bold"), fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=5)
            
            tk.Label(section_frame, text=desc, 
                   font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg, 
                   wraplength=700, justify="left").pack(anchor="w", padx=10, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
        contact_frame = tk.Frame(help_frame, bg=self.card_bg, relief="solid", borderwidth=1)
        contact_frame.pack(fill="x", pady=15)
        
        tk.Label(contact_frame, text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                font=("Helvetica", 14, "bold"), fg=self.primary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=5)
        
        tk.Label(contact_frame, text="–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:", 
                font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg).pack(anchor="w", padx=10, pady=5)
        
        tk.Label(contact_frame, text="Email: support@jyldamjauap.kz", 
                font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg).pack(anchor="w", padx=20, pady=2)
        
        tk.Label(contact_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω: +7 (777) 123-45-67", 
                font=("Helvetica", 12), fg=self.secondary_color, bg=self.card_bg).pack(anchor="w", padx=20, pady=2)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_btn = tk.Button(help_frame, text="‚Üê –ù–∞–∑–∞–¥", 
                            command=self.show_main_menu, bg=self.secondary_color, fg=self.text_color)
        back_btn.pack(pady=20)

    def open_profile(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            subprocess.Popen(["python", "user_profile.py"])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {e}")

    def show_privacy_policy(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        messagebox.showinfo("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", 
                          "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Jyldam jauap\n\n" + 
                          "–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è.\n" + 
                          "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not os.path.exists("db"):
        os.makedirs("db")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("images"):
        os.makedirs("images")
    
    if not os.path.exists("images/lawyers"):
        os.makedirs("images/lawyers")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("db/users.db"):
        conn = sqlite3.connect("db/users.db")
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS news (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL
        )
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —à—Ç—Ä–∞—Ñ–æ–≤
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS fines (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            amount TEXT NOT NULL
        )
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —é—Ä–∏—Å—Ç–æ–≤ —Å –ø–æ–ª–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∞
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS lawyers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            specialization TEXT,
            experience INTEGER,
            rating FLOAT DEFAULT 0
        )
        ''')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO news (title, description) VALUES (?, ?)", 
                      ("–ù–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏", "–° 1 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏ –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ó–∞–∫–æ–Ω –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ò–ü –∏ –º–∞–ª—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π. –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π."))
        cursor.execute("INSERT INTO news (title, description) VALUES (?, ?)", 
                      ("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —É—Ç–≤–µ—Ä–¥–∏–ª–æ –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π. –¢–µ–ø–µ—Ä—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω, –±–µ–∑ –ø–æ—Å–µ—â–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤. –°—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∫—Ä–∞—â–µ–Ω –¥–æ 1 —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –¢–∞–∫–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–ª–∏—à–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π."))
        cursor.execute("INSERT INTO news (title, description) VALUES (?, ?)", 
                      ("–û—Ç–∫—Ä—ã—Ç–∏–µ –¶–µ–Ω—Ç—Ä–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–í –ê—Å—Ç–∞–Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π –¶–µ–Ω—Ç—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π. –í —Ü–µ–Ω—Ç—Ä–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–µ–¥–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞, –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –∏ —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –¶–µ–Ω—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 18:00. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ —Ü–µ–Ω—Ç—Ä–∞ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."))
        
        cursor.execute("INSERT INTO fines (description, amount) VALUES (?, ?)", 
                      ("–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–∞—á—É –Ω–∞–ª–æ–≥–æ–≤–æ–π –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏", "15000"))
        cursor.execute("INSERT INTO fines (description, amount) VALUES (?, ?)", 
                      ("–®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü", "50000"))
        cursor.execute("INSERT INTO fines (description, amount) VALUES (?, ?)", 
                      ("–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "100000"))
        cursor.execute("INSERT INTO fines (description, amount) VALUES (?, ?)", 
                      ("–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π", "75000"))
        cursor.execute("INSERT INTO fines (description, amount) VALUES (?, ?)", 
                      ("–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–æ—Ä–º", "120000"))
        
        cursor.execute("INSERT INTO lawyers (name, phone, specialization, experience, rating) VALUES (?, ?, ?, ?, ?)", 
                      ("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "+7 (777) 123-45-67", "–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", 10, 4.7))
        cursor.execute("INSERT INTO lawyers (name, phone, specialization, experience, rating) VALUES (?, ?, ?, ?, ?)", 
                      ("–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞", "+7 (777) 987-65-43", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", 8, 4.9))
        cursor.execute("INSERT INTO lawyers (name, phone, specialization, experience, rating) VALUES (?, ?, ?, ?, ?)", 
                      ("–°–µ—Ä—ñ–∫–æ–≤ –ù“±—Ä–ª–∞–Ω “ö–∞–Ω–∞—Ç“±–ª—ã", "+7 (777) 456-78-90", "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", 15, 4.8))
        cursor.execute("INSERT INTO lawyers (name, phone, specialization, experience, rating) VALUES (?, ?, ?, ?, ?)", 
                      ("–ê—Ö–º–µ—Ç–æ–≤–∞ –ì“Ø–ª–Ω–∞—Ä –ë–µ–∫“õ—ã–∑—ã", "+7 (777) 111-22-33", "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π", 12, 4.5))
        cursor.execute("INSERT INTO lawyers (name, phone, specialization, experience, rating) VALUES (?, ?, ?, ?, ?)", 
                      ("–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "+7 (777) 444-55-66", "–ó–µ–º–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ", 9, 4.6))
        
        conn.commit()
        conn.close()
    
    root = tk.Tk()
    app = MainApp(root)
    root.mainloop()