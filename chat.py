import tkinter as tk
from tkinter import scrolledtext, messagebox, filedialog, ttk
import threading
import time
import openai
import os
import json
from datetime import datetime
from PIL import Image, ImageTk
from constants import OPENAI_API_KEY

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é)
PRIMARY_COLOR = "#B71C1C"  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
SECONDARY_COLOR = "#212121"  # –ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
ACCENT_COLOR = "#F44336"  # –ë–æ–ª–µ–µ —è—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤
BG_COLOR = "#F5F5F5"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
TEXT_COLOR = "#FFFFFF"  # –ë–µ–ª—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
USER_BG = "#E0E0E0"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
AI_BG = "#B71C1C"  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π AI
LIGHT_GRAY = "#CCCCCC"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
FONT = ("Helvetica", 12)
BUTTON_FONT = ("Helvetica", 10)

class ChatApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Jyldam jauap - –ü—Ä–∞–≤–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        self.root.geometry("900x700")
        self.root.configure(bg=BG_COLOR)
        self.root.minsize(600, 500)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –∏ –∑–∞–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        openai.api_key = OPENAI_API_KEY
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        openai.api_requestor.TIMEOUT_SECS = 30
        self.message_history = [
            {"role": "system", "content": """
             –í—ã - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.
             
             –í–∞–∂–Ω–æ: –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ 
             –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –∞–∫—Ç—ã, –∑–∞–∫–æ–Ω—ã, –∫–æ–¥–µ–∫—Å—ã –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.
             
             –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
             
             –ò—Å—Ç–æ—á–Ω–∏–∫–∏:
             1. –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö, —Å—Ç–∞—Ç—å—è 123
             2. –ó–∞–∫–æ–Ω –†–ö "–û –ø—Ä–∞–≤–∞—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π", —Å—Ç–∞—Ç—å—è 45
             """}
        ]
        self.is_requesting = False
        self.conversation_started = False
        self.chat_messages = []

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
        if not os.path.exists("chat_history"):
            os.makedirs("chat_history")

        self.create_widgets()
        self.show_welcome_message()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg=BG_COLOR)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é)
        self.sidebar = tk.Frame(main_frame, bg=SECONDARY_COLOR, width=200)
        self.sidebar.pack(side=tk.LEFT, fill=tk.Y)
        self.sidebar.pack_propagate(False)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        sidebar_header = tk.Frame(self.sidebar, bg=SECONDARY_COLOR, height=80)
        sidebar_header.pack(fill=tk.X)
        
        # –õ–æ–≥–æ—Ç–∏–ø –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        try:
            logo_img = Image.open("images/logo.png")
            logo_img = logo_img.resize((40, 40), Image.LANCZOS)
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(sidebar_header, image=logo_photo, bg=SECONDARY_COLOR)
            logo_label.image = logo_photo
            logo_label.pack(side=tk.LEFT, padx=10, pady=20)
        except:
            logo_text = tk.Label(sidebar_header, text="JJ", font=("Helvetica", 18, "bold"), 
                               fg=PRIMARY_COLOR, bg="white", width=2, height=1)
            logo_text.pack(side=tk.LEFT, padx=10, pady=20)

        # –ù–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π
        sections_label = tk.Label(self.sidebar, text="–ü—Ä–∞–≤–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
                                font=("Helvetica", 14, "bold"), fg=TEXT_COLOR, bg=SECONDARY_COLOR)
        sections_label.pack(pady=10)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        separator = tk.Frame(self.sidebar, height=2, bg=ACCENT_COLOR)
        separator.pack(fill=tk.X, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        button_style = {
            "font": BUTTON_FONT,
            "bg": SECONDARY_COLOR,
            "fg": TEXT_COLOR,
            "bd": 0,
            "highlightthickness": 0,
            "activebackground": ACCENT_COLOR,
            "activeforeground": TEXT_COLOR,
            "cursor": "hand2",
            "anchor": "w",
            "width": 20,
            "pady": 8
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        self.new_chat_btn = tk.Button(self.sidebar, text="üîÑ –ù–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä", 
                                     command=self.new_conversation, **button_style)
        self.new_chat_btn.pack(fill=tk.X, pady=2, padx=5)
        
        self.save_chat_btn = tk.Button(self.sidebar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç", 
                                      command=self.save_conversation, **button_style)
        self.save_chat_btn.pack(fill=tk.X, pady=2, padx=5)
        
        self.history_btn = tk.Button(self.sidebar, text="üìã –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤", 
                                    command=self.show_history, **button_style)
        self.history_btn.pack(fill=tk.X, pady=2, padx=5)
        
        # –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        faq_label = tk.Label(self.sidebar, text="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", 
                           font=("Helvetica", 12, "bold"), fg=TEXT_COLOR, bg=SECONDARY_COLOR)
        faq_label.pack(anchor="w", padx=10, pady=(20, 5))
        
        faqs = [
            "‚ùì –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ò–ü?",
            "‚ùì –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç",
            "‚ùì –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
            "‚ùì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¢–û–û"
        ]
        
        for faq in faqs:
            faq_btn = tk.Button(self.sidebar, text=faq, **button_style)
            faq_btn.pack(fill=tk.X, pady=1, padx=5)
            faq_btn.configure(command=lambda q=faq[2:]: self.ask_faq(q))
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            faq_btn.bind("<Enter>", lambda e, b=faq_btn: b.config(bg=PRIMARY_COLOR))
            faq_btn.bind("<Leave>", lambda e, b=faq_btn: b.config(bg=SECONDARY_COLOR))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤–Ω–∏–∑—É —Å–∞–π–¥–±–∞—Ä–∞
        version_label = tk.Label(self.sidebar, text="–í–µ—Ä—Å–∏—è 1.2.0", 
                               font=("Helvetica", 8), fg="#888888", bg=SECONDARY_COLOR)
        version_label.pack(side=tk.BOTTOM, pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç)
        right_panel = tk.Frame(main_frame, bg=BG_COLOR)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(right_panel, bg=PRIMARY_COLOR, height=80)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        title = tk.Label(header, text="JYLDAM JAUAP", font=("Helvetica", 24, "bold"), 
                       fg=TEXT_COLOR, bg=PRIMARY_COLOR)
        title.pack(side=tk.LEFT, padx=20, pady=20)

        subtitle = tk.Label(header, text="–ü—Ä–∞–≤–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", font=("Helvetica", 12), 
                          fg=TEXT_COLOR, bg=PRIMARY_COLOR)
        subtitle.pack(side=tk.LEFT, padx=10, pady=20)
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        current_date = datetime.now().strftime("%d.%m.%Y")
        date_label = tk.Label(header, text=current_date, font=("Helvetica", 12), 
                            fg=TEXT_COLOR, bg=PRIMARY_COLOR)
        date_label.pack(side=tk.RIGHT, padx=20, pady=20)

        # –§—Ä–µ–π–º –¥–ª—è —á–∞—Ç–∞
        self.chat_container = tk.Frame(right_panel, bg=BG_COLOR)
        self.chat_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas = tk.Canvas(self.chat_container, bg=BG_COLOR, highlightthickness=0)
        self.scrollbar = tk.Scrollbar(self.chat_container, orient="vertical", command=self.canvas.yview)
        self.message_container = tk.Frame(self.canvas, bg=BG_COLOR)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        self.canvas_window = self.canvas.create_window((0, 0), window=self.message_container, anchor="nw", width=self.canvas.winfo_width())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞
        def configure_message_container(event):
            self.canvas.itemconfig(self.canvas_window, width=event.width)
            
        self.canvas.bind("<Configure>", configure_message_container)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        def configure_scroll_region(event):
            self.canvas.configure(scrollregion=self.canvas.bbox("all"))
            
        self.message_container.bind("<Configure>", configure_scroll_region)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
        self.scroll_btn_frame = tk.Frame(self.chat_container, bg=BG_COLOR)
        self.scroll_btn_frame.place(relx=0.95, rely=0.9)
        
        self.scroll_btn = tk.Button(self.scroll_btn_frame, text="‚Üì", font=("Helvetica", 16), 
                                  bg=PRIMARY_COLOR, fg=TEXT_COLOR, bd=0, padx=5, pady=0,
                                  command=self.scroll_to_bottom, cursor="hand2")
        self.scroll_btn.pack()

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        input_panel = tk.Frame(right_panel, bg=SECONDARY_COLOR)
        input_panel.pack(fill=tk.X, side=tk.BOTTOM)
        
        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.input_frame = tk.Frame(input_panel, bg=SECONDARY_COLOR, padx=15, pady=10)
        self.input_frame.pack(fill=tk.X)
        
        self.input_box = scrolledtext.ScrolledText(self.input_frame, bg=TEXT_COLOR, fg=SECONDARY_COLOR, 
                                                 font=FONT, bd=1, relief="solid", height=3)
        self.input_box.pack(fill=tk.X, side=tk.LEFT, expand=True, padx=(0, 10))
        self.input_box.bind("<Return>", self.handle_return)
        self.input_box.bind("<Shift-Return>", self.add_newline)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.input_box.insert(tk.INSERT, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        self.input_box.config(fg="gray")
        
        def on_focus_in(event):
            if self.input_box.get("1.0", "end-1c") == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...":
                self.input_box.delete("1.0", tk.END)
                self.input_box.config(fg=SECONDARY_COLOR)
                
        def on_focus_out(event):
            if not self.input_box.get("1.0", "end-1c").strip():
                self.input_box.insert("1.0", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
                self.input_box.config(fg="gray")
                
        self.input_box.bind("<FocusIn>", on_focus_in)
        self.input_box.bind("<FocusOut>", on_focus_out)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = tk.Frame(self.input_frame, bg=SECONDARY_COLOR)
        buttons_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.send_button = tk.Button(buttons_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", bg=ACCENT_COLOR, fg=TEXT_COLOR,
                                   font=BUTTON_FONT, bd=0, padx=15, pady=8, 
                                   command=self.send_message, cursor="hand2")
        self.send_button.pack(side=tk.BOTTOM)

    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_msg = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–∞–≤–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Jyldam jauap!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. "
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ:\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ (–ò–ü, –¢–û–û)\n"
            "‚Ä¢ –ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏\n"
            "‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–º –ø—Ä–∞–≤–µ\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∞—Ö –∏ —Å–¥–µ–ª–∫–∞—Ö\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
        )
        self.display_message(welcome_msg, "ai")

    def handle_return(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        self.input_box.unbind("<Return>")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.send_message()
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Enter
        self.root.after(100, lambda: self.input_box.bind("<Return>", self.handle_return))
        return "break"  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

    def add_newline(self, event):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ Shift+Enter"""
        return None  # –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

    def send_message(self, event=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å –∫ OpenAI"""
        if self.is_requesting:
            return

        user_message = self.input_box.get("1.0", tk.END).strip()
        if not user_message or user_message == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...":
            return

        self.input_box.delete("1.0", tk.END)
        self.display_message(user_message, "user")
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞—Ç
        self.conversation_started = True

        self.message_history.append({"role": "user", "content": user_message})
        self.is_requesting = True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.show_loading_indicator()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        threading.Thread(target=self.get_ai_response, daemon=True).start()
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
        self.scroll_to_bottom()

    def show_loading_indicator(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_frame = tk.Frame(self.message_container, bg=BG_COLOR)
        self.loading_frame.pack(anchor="w", padx=10, pady=5, fill="x")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –∞–≤–∞—Ç–∞—Ä–æ–º AI
        avatar_frame = tk.Frame(self.loading_frame, bg=BG_COLOR)
        avatar_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ê–≤–∞—Ç–∞—Ä AI
        ai_avatar = tk.Label(avatar_frame, text="AI", font=("Helvetica", 12, "bold"), 
                           fg=TEXT_COLOR, bg=PRIMARY_COLOR, width=3, height=2)
        ai_avatar.pack()
        
        # –ü—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è
        bubble = tk.Frame(self.loading_frame, bg=AI_BG, padx=15, pady=10,
                        highlightbackground=SECONDARY_COLOR, highlightthickness=1)
        bubble.pack(side=tk.LEFT, anchor="w")
        
        # –¢–æ—á–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label = tk.Label(bubble, text="–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç", 
                                    font=FONT, bg=AI_BG, fg=TEXT_COLOR)
        self.loading_label.pack()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.canvas.update_idletasks()
        self.canvas.yview_moveto(1)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞

    def update_loading_animation(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            if not hasattr(self, 'loading_label') or not self.loading_label.winfo_exists():
                return False
                
            dots = ["", ".", "..", "..."]
            for dot in dots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                if not hasattr(self, 'loading_label') or not self.loading_label.winfo_exists():
                    return False
                    
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                try:
                    self.loading_label.config(text=f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç{dot}")
                    self.root.update_idletasks()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_idletasks –≤–º–µ—Å—Ç–æ update
                    time.sleep(0.2)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                except tk.TclError:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤–∏–¥–∂–µ—Ç –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                    return False
                    
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
            return False

    def get_ai_response(self):
        """–ó–∞–ø—Ä–æ—Å –∫ OpenAI API"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
        animation_counter = 0
        max_animation_cycles = 10
        
        while animation_counter < max_animation_cycles and self.update_loading_animation():
            animation_counter += 1
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            openai.api_requestor.TIMEOUT_SECS = 30
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å gpt-4 –ø–æ–∑–∂–µ
                messages=self.message_history,
                max_tokens=1000,
                timeout=30  # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if 'choices' in response and len(response['choices']) > 0 and 'message' in response['choices'][0]:
                ai_response = response['choices'][0]['message']['content']
                self.message_history.append({"role": "assistant", "content": ai_response})
                
                # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ tkinter main thread
                def update_ui():
                    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    if hasattr(self, 'loading_frame') and self.loading_frame.winfo_exists():
                        self.loading_frame.destroy()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                    self.display_message(ai_response, "ai")
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
                    self.scroll_to_bottom()
                    
                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    self.is_requesting = False
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ tkinter
                self.root.after(100, update_ui)
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ API: {str(e)}")  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ tkinter
            def handle_error():
                if hasattr(self, 'loading_frame') and self.loading_frame.winfo_exists():
                    self.loading_frame.destroy()
                self.display_message(f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", "error")
                self.is_requesting = False
            
            self.root.after(100, handle_error)

    def display_message(self, message, sender):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        message_card = tk.Frame(self.message_container, bg=BG_COLOR)
        
        if sender == "user":
            message_card.pack(padx=10, pady=5, fill="x")
            
            # –§—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_frame = tk.Frame(message_card, bg=BG_COLOR)
            content_frame.pack(side=tk.RIGHT)
            
            # –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_frame = tk.Frame(content_frame, bg=BG_COLOR)
            avatar_frame.pack(side=tk.RIGHT, padx=(10, 0))
            
            user_avatar = tk.Label(avatar_frame, text="–í—ã", font=("Helvetica", 12, "bold"), 
                                 fg=PRIMARY_COLOR, bg="#FFFFFF", width=3, height=2,
                                 borderwidth=1, relief="solid")
            user_avatar.pack()
            
            # –ü—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            bubble = tk.Frame(content_frame, bg=USER_BG, padx=15, pady=10,
                           highlightbackground=SECONDARY_COLOR, highlightthickness=1)
            bubble.pack(side=tk.RIGHT)
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_label = tk.Label(bubble, text=message, wraplength=500, font=FONT, 
                               justify="left", bg=USER_BG, fg=SECONDARY_COLOR)
            msg_label.pack()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.chat_messages.append({"sender": "user", "message": message, "time": datetime.now().strftime("%H:%M")})
            
        elif sender == "ai":
            message_card.pack(padx=10, pady=5, fill="x")
            
            # –§—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_frame = tk.Frame(message_card, bg=BG_COLOR)
            content_frame.pack(side=tk.LEFT)
            
            # –ê–≤–∞—Ç–∞—Ä AI
            avatar_frame = tk.Frame(content_frame, bg=BG_COLOR)
            avatar_frame.pack(side=tk.LEFT, padx=(0, 10))
            
            ai_avatar = tk.Label(avatar_frame, text="AI", font=("Helvetica", 12, "bold"), 
                               fg=TEXT_COLOR, bg=PRIMARY_COLOR, width=3, height=2)
            ai_avatar.pack()
            
            # –ü—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            bubble = tk.Frame(content_frame, bg=AI_BG, padx=15, pady=10,
                           highlightbackground=SECONDARY_COLOR, highlightthickness=1)
            bubble.pack(side=tk.LEFT)
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            msg_label = tk.Label(bubble, text=message, wraplength=500, font=FONT, 
                               justify="left", bg=AI_BG, fg=TEXT_COLOR)
            msg_label.pack()
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è AI
            actions_frame = tk.Frame(bubble, bg=AI_BG)
            actions_frame.pack(anchor="e", pady=(10, 0))
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_btn = tk.Button(actions_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", font=("Helvetica", 8), 
                               bg=SECONDARY_COLOR, fg=TEXT_COLOR, bd=0, padx=5, pady=2,
                               command=lambda: self.copy_to_clipboard(message))
            copy_btn.pack(side=tk.LEFT, padx=2)
            
            # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            thumbs_up = tk.Button(actions_frame, text="üëç", font=("Helvetica", 8), 
                                bg=SECONDARY_COLOR, fg=TEXT_COLOR, bd=0, padx=5, pady=2,
                                command=lambda: self.feedback("positive"))
            thumbs_up.pack(side=tk.LEFT, padx=2)
            
            thumbs_down = tk.Button(actions_frame, text="üëé", font=("Helvetica", 8), 
                                  bg=SECONDARY_COLOR, fg=TEXT_COLOR, bd=0, padx=5, pady=2,
                                  command=lambda: self.feedback("negative"))
            thumbs_down.pack(side=tk.LEFT, padx=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.chat_messages.append({"sender": "ai", "message": message, "time": datetime.now().strftime("%H:%M")})
            
        else:  # error
            message_card.pack(padx=10, pady=5, fill="x")
            
            # –§—Ä–µ–π–º –¥–ª—è –æ—à–∏–±–∫–∏
            error_frame = tk.Frame(message_card, bg="#FFEBEE", padx=15, pady=10,
                                 highlightbackground="#B71C1C", highlightthickness=1)
            error_frame.pack()
            
            # –ò–∫–æ–Ω–∫–∞ –æ—à–∏–±–∫–∏
            error_icon = tk.Label(error_frame, text="‚ö†Ô∏è", font=("Helvetica", 14))
            error_icon.pack(side=tk.LEFT, padx=(0, 10))
            
            # –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            error_label = tk.Label(error_frame, text=message, wraplength=500, font=FONT, 
                                 justify="left", bg="#FFEBEE", fg="#B71C1C")
            error_label.pack(side=tk.LEFT)
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
            retry_btn = tk.Button(error_frame, text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", font=("Helvetica", 10), 
                                bg=PRIMARY_COLOR, fg=TEXT_COLOR, bd=0, padx=10, pady=5,
                                command=self.retry_last_request)
            retry_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.canvas.update_idletasks()
        self.canvas.yview_moveto(1)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞

    def copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ tkinter"""
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = tk.Label(self.root, text="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", 
                              font=("Helvetica", 10), bg=SECONDARY_COLOR, fg=TEXT_COLOR,
                              padx=10, pady=5)
        notification.place(relx=0.5, rely=0.1, anchor="center")
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, notification.destroy)

    def feedback(self, feedback_type):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤."
        messagebox.showinfo("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", message)

    def retry_last_request(self):
        """–ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å"""
        if len(self.message_history) > 1:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            user_message = self.message_history[-1]["content"]
            self.message_history = self.message_history[:-1]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
            self.input_box.delete("1.0", tk.END)
            self.input_box.insert(tk.END, user_message)
            self.send_message()

    def scroll_to_bottom(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —á–∞—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.canvas.update_idletasks()
        self.canvas.yview_moveto(1)

    def new_conversation(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        if self.conversation_started:
            if messagebox.askyesno("–ù–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä? –¢–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω."):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                if self.chat_messages:
                    self.save_conversation(auto=True)
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
                for widget in self.message_container.winfo_children():
                    widget.destroy()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–ª—è—è —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.message_history = [self.message_history[0]]
                self.chat_messages = []
                self.conversation_started = False
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.show_welcome_message()
        else:
            # –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for widget in self.message_container.winfo_children():
                widget.destroy()
            self.show_welcome_message()

    def save_conversation(self, auto=False):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ñ–∞–π–ª"""
        if not self.chat_messages:
            if not auto:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"chat_history/chat_{timestamp}.json"
        
        filename = default_filename
        if not auto:
            filename = filedialog.asksaveasfilename(
                initialdir="chat_history",
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä",
                filetypes=(("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")),
                defaultextension=".json",
                initialfile=f"chat_{timestamp}.json"
            )
            
        if filename:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                chat_data = {
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "messages": self.chat_messages
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(chat_data, f, ensure_ascii=False, indent=4)
                    
                if not auto:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{filename}")
            except Exception as e:
                if not auto:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä: {str(e)}")

    def show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        chat_files = []
        try:
            for file in os.listdir("chat_history"):
                if file.endswith(".json"):
                    chat_files.append(file)
        except Exception:
            pass
            
        if not chat_files:
            messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤", "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏
        history_window = tk.Toplevel(self.root)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
        history_window.geometry("600x400")
        history_window.configure(bg=BG_COLOR)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(history_window, text="–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤", font=("Helvetica", 16, "bold"), 
               bg=BG_COLOR, fg=PRIMARY_COLOR).pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        list_frame = tk.Frame(history_window, bg=BG_COLOR)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Listbox —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        chat_listbox = tk.Listbox(list_frame, font=FONT, bg=TEXT_COLOR, fg=SECONDARY_COLOR,
                                 selectbackground=PRIMARY_COLOR, selectforeground=TEXT_COLOR,
                                 height=15, width=50)
        chat_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        chat_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=chat_listbox.yview)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã–º–∏
        for file in sorted(chat_files, reverse=True):
            try:
                with open(os.path.join("chat_history", file), 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                    timestamp = chat_data.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    message_count = len(chat_data.get("messages", []))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
                    preview = ""
                    for msg in chat_data.get("messages", []):
                        if msg.get("sender") == "user":
                            preview = msg.get("message", "")[:50]
                            if len(preview) > 47:
                                preview += "..."
                            break
                            
                    chat_listbox.insert(tk.END, f"{timestamp} ({message_count} —Å–æ–æ–±—â.): {preview}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    chat_listbox.itemconfig(tk.END, {'filename': file})
            except Exception:
                chat_listbox.insert(tk.END, f"{file} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = tk.Frame(history_window, bg=BG_COLOR)
        buttons_frame.pack(fill=tk.X, pady=10)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        def load_selected_chat():
            selection = chat_listbox.curselection()
            if not selection:
                messagebox.showinfo("–í—ã–±–æ—Ä —á–∞—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                return
                
            filename = getattr(chat_listbox, 'itemcget')(selection[0], 'filename')
            if not filename:
                return
                
            try:
                with open(os.path.join("chat_history", filename), 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                    
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if messagebox.askyesno("–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞", 
                                     "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç? –¢–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω."):
                    try:
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                        for widget in self.message_container.winfo_children():
                            widget.destroy()
                            
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–ª—è—è —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.message_history = [self.message_history[0]]
                        self.chat_messages = []
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                        loaded_messages = chat_data.get("messages", [])
                        
                        if not loaded_messages:
                            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —á–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
                            return
                            
                        for msg in loaded_messages:
                            try:
                                sender = msg.get("sender")
                                message = msg.get("message", "")
                                
                                if not sender or not message:
                                    continue
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                self.display_message(message, sender)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
                                if sender == "user":
                                    self.message_history.append({"role": "user", "content": message})
                                elif sender == "ai":
                                    self.message_history.append({"role": "assistant", "content": message})
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                                continue
                        
                        history_window.destroy()
                        self.conversation_started = True
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.scroll_to_bottom()
                        
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞: {str(e)}")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç: {str(e)}")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        def delete_selected_chat():
            selection = chat_listbox.curselection()
            if not selection:
                messagebox.showinfo("–í—ã–±–æ—Ä —á–∞—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
                
            filename = getattr(chat_listbox, 'itemcget')(selection[0], 'filename')
            if not filename:
                return
                
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞", 
                                 f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n{filename}?"):
                try:
                    os.remove(os.path.join("chat_history", filename))
                    chat_listbox.delete(selection)
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç: {str(e)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        load_btn = tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", font=BUTTON_FONT, 
                           bg=PRIMARY_COLOR, fg=TEXT_COLOR, command=load_selected_chat)
        load_btn.pack(side=tk.LEFT, padx=20)
        
        delete_btn = tk.Button(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", font=BUTTON_FONT, 
                             bg=SECONDARY_COLOR, fg=TEXT_COLOR, command=delete_selected_chat)
        delete_btn.pack(side=tk.LEFT, padx=20)
        
        close_btn = tk.Button(buttons_frame, text="–ó–∞–∫—Ä—ã—Ç—å", font=BUTTON_FONT, 
                            bg=LIGHT_GRAY, fg=SECONDARY_COLOR, command=history_window.destroy)
        close_btn.pack(side=tk.RIGHT, padx=20)

    def ask_faq(self, question):
        """–ó–∞–¥–∞–µ—Ç —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ"""
        self.input_box.delete("1.0", tk.END)
        self.input_box.insert(tk.END, question)
        self.input_box.config(fg=SECONDARY_COLOR)
        self.send_message()

def open_chat():
    """–ó–∞–ø—É—Å–∫ –æ–∫–Ω–∞ —á–∞—Ç–∞"""
    chat_window = tk.Toplevel()
    ChatApp(chat_window)

if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()
    open_chat()
    root.mainloop()